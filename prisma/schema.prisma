generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        Role
  avatarUrl   String?  // imagem do perfil
  schedules   Schedule[]
  tickets     Ticket[] @relation("ClientTickets")
  assigned    Ticket[] @relation("TechTickets")
  createdAt   DateTime @default(now())
  resetTokens PasswordResetToken[]
  
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}


enum Role {
  admin
  tecnico
  cliente
}

enum TicketStatus {
  ABERTO
  EM_ATENDIMENTO
  ENCERRADO
}

model Schedule {
  id     String @id @default(uuid())
  hour   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Service {
  id        String           @id @default(uuid())
  name      String
  price     Float
  active    Boolean          @default(true)
  tickets   TicketService[]
  createdAt DateTime         @default(now())
}

model Ticket {
  id            String           @id @default(uuid())
  title         String?           
  description   String?          
  clientId      String
  technicianId  String?
  status        TicketStatus
  createdAt     DateTime         @default(now())
  updatedAt   DateTime?     @updatedAt

  client        User             @relation("ClientTickets", fields: [clientId], references: [id], onDelete: Cascade)
  technician    User?            @relation("TechTickets", fields: [technicianId], references: [id])
  services      TicketService[]
  logs        TicketLog[] 
}


model TicketService {
  id        String   @id @default(uuid())
  ticketId  String
  serviceId String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
}
model TicketLog {
  id             String       @id @default(cuid())
  ticketId       String
  previousStatus TicketStatus
  newStatus      TicketStatus
  changedBy      String
  createdAt      DateTime     @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id])
}